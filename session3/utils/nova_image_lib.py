
# utils/nova_image_lib.py
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
Utility library for generating images with Amazon Nova Canvas model.
Provides a simplified interface for the Streamlit app.
"""

import base64
import io
import json
import logging
import boto3
from PIL import Image
from botocore.config import Config
from botocore.exceptions import ClientError


class NovaImageError(Exception):
    """Custom exception for errors returned by Amazon Nova Canvas"""

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)


def generate_image_with_nova(model_id, body):
    """
    Generate an image using Amazon Nova Canvas model on demand.
    
    Args:
        model_id (str): The model ID to use.
        body (str): The request body to use.
        
    Returns:
        bytes: The image generated by the model.
        
    Raises:
        NovaImageError: If image generation fails.
        ClientError: If there's an AWS service error.
    """
    logger.info("Generating image with Amazon Nova Canvas model %s", model_id)

    try:
        bedrock = boto3.client(
            service_name='bedrock-runtime',region_name='us-east-1',
            config=Config(read_timeout=300)
        )

        accept = "application/json"
        content_type = "application/json"

        response = bedrock.invoke_model(
            body=body, 
            modelId=model_id, 
            accept=accept, 
            contentType=content_type
        )
        
        response_body = json.loads(response.get("body").read())

        # Check for errors first
        error = response_body.get("error")
        if error is not None:
            raise NovaImageError(f"Image generation error: {error}")

        # Extract image data
        images = response_body.get("images")
        if not images or len(images) == 0:
            raise NovaImageError("No images returned from the model")

        base64_image = images[0]
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)

        logger.info("Successfully generated image with Amazon Nova Canvas model %s", model_id)
        return image_bytes

    except ClientError as err:
        error_message = err.response.get("Error", {}).get("Message", str(err))
        logger.error("AWS client error: %s", error_message)
        raise NovaImageError(f"AWS service error: {error_message}")
    
    except Exception as err:
        logger.error("Unexpected error: %s", str(err))
        raise NovaImageError(f"Unexpected error: {str(err)}")


def get_image_from_nova_model(
    prompt_content,
    negative_prompt=None,
    style="PHOTOREALISM",
    width=512,
    height=512,
    cfg_scale=8.0,
    seed=0,
    num_images=1
):
    """
    Generate an image using Amazon Nova Canvas with specified parameters.
    
    Args:
        prompt_content (str): The main prompt describing what to generate.
        negative_prompt (str, optional): What should NOT be in the image.
        style (str): The art style to apply. Defaults to "PHOTOREALISM".
        width (int): Image width in pixels. Defaults to 512.
        height (int): Image height in pixels. Defaults to 512.
        cfg_scale (float): How closely to follow the prompt (1-20). Defaults to 8.0.
        seed (int): Random seed for reproducibility. Defaults to 0.
        num_images (int): Number of images to generate. Defaults to 1.
        
    Returns:
        PIL.Image: The generated image as a PIL Image object.
        
    Raises:
        NovaImageError: If image generation fails.
    """
    model_id = 'amazon.nova-canvas-v1:0'
    
    # Build the textToImageParams
    text_to_image_params = {
        "text": prompt_content
    }
    
    # Add negative prompt if provided
    if negative_prompt and negative_prompt.strip():
        text_to_image_params["negativeText"] = negative_prompt.strip()
    
    # Add style if specified
    if style:
        text_to_image_params["style"] = style
    
    # Construct the request body
    body = {
        "taskType": "TEXT_IMAGE",
        "textToImageParams": text_to_image_params,
        "imageGenerationConfig": {
            "numberOfImages": num_images,
            "height": height,
            "width": width,
            "cfgScale": cfg_scale,
            "seed": seed
        }
    }
    
    # Convert to JSON
    body_json = json.dumps(body)
    
    logger.info(f"Generating image with prompt: {prompt_content[:100]}...")
    logger.info(f"Style: {style}, Dimensions: {width}x{height}")
    if negative_prompt:
        logger.info(f"Negative prompt: {negative_prompt[:50]}...")
    
    try:
        # Generate the image
        image_bytes = generate_image_with_nova(model_id, body_json)
        
        # Convert to PIL Image
        image = Image.open(io.BytesIO(image_bytes))
        
        return image
        
    except Exception as err:
        logger.error(f"Failed to generate image: {str(err)}")
        raise


def get_available_styles():
    """
    Get the list of available styles for Nova Canvas.
    
    Returns:
        dict: Dictionary mapping style codes to display names.
    """
    return {
        "PHOTOREALISM": "Photorealism",
        "SOFT_DIGITAL_PAINTING": "Soft Digital Painting", 
        "3D_ANIMATED_FAMILY_FILM": "3D Animated Family Film",
        "DESIGN_SKETCH": "Design Sketch",
        "FLAT_VECTOR_ILLUSTRATION": "Flat Vector Illustration",
        "GRAPHIC_NOVEL_ILLUSTRATION": "Graphic Novel Illustration",
        "MAXIMALISM": "Maximalism",
        "MIDCENTURY_RETRO": "Midcentury Retro"
    }


def validate_dimensions(width, height):
    """
    Validate image dimensions for Nova Canvas.
    
    Args:
        width (int): Image width
        height (int): Image height
        
    Returns:
        bool: True if dimensions are valid
        
    Raises:
        NovaImageError: If dimensions are invalid
    """
    valid_sizes = [512, 768, 1024]
    
    if width not in valid_sizes:
        raise NovaImageError(f"Invalid width: {width}. Must be one of {valid_sizes}")
    
    if height not in valid_sizes:
        raise NovaImageError(f"Invalid height: {height}. Must be one of {valid_sizes}")
    
    return True


def save_image_to_bytes(image, format="PNG"):
    """
    Convert PIL Image to bytes.
    
    Args:
        image (PIL.Image): The image to convert
        format (str): Image format (PNG, JPEG, etc.)
        
    Returns:
        bytes: Image as bytes
    """
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format=format)
    img_byte_arr.seek(0)
    return img_byte_arr.getvalue()


# Export the main functions
__all__ = [
    'get_image_from_nova_model',
    'NovaImageError', 
    'get_available_styles',
    'validate_dimensions',
    'save_image_to_bytes'
]
